
module builtin

/*
string double_str(double self) { //fn
    char* buf = f_malloc(sizeof(double) * 5 + 1);
    sprintf(buf, "%f", self);
    return tos(buf, _strlen(buf)); 
}
*/
[<double, f64, f32>]
fn(<T> d) str() string {
	char* buf = malloc(sizeof(double) * 5 + 1)
	C.sprintf(buf, '%f', d)
	return tos(buf, _strlen(buf))
}
/*
fn(f64 d) str() string {
	buf := malloc(sizeof(double) * 5 + 1)
	C.sprintf(buf, '%f', d)
	return tos(buf, _strlen(buf))
}

fn(f32 d) str() string {
	buf := malloc(sizeof(double) * 5 + 1)
	C.sprintf(buf, '%f', d)
	return tos(buf, _strlen(buf))
}
*/

fn ptr_str(void* ptr) string {
	buf := malloc(sizeof(double) * 5 + 1)
	C.sprintf(buf, '%p', ptr)
	return tos(buf, _strlen(buf))
}

fn(int num) str() string {
	var n = num
	if n == 0 {
		return '0'
	}
	max := 16
	var buf = malloc(max)
	
	var is_neg = false
	if n < 0 {
		n = -n
		is_neg = true
	}
	
	var len = 0
	for n > 0 {
		d := n % 10
		buf[max - len - 1] = d + int(`0`)
		len++
		n = n / 10
	}
	
	if is_neg {
		buf[max - len - 1] = `-`
		len++
	}
	return tos(buf + max - len, len)
}

fn(u8 num) str() string {
	 var n = num
	if n == u8(0) {
		return '0'
	}
	max := 5
	var buf = malloc(max)
	var len = 0
	var is_neg = false
	if n < u8(0) {
		n = -n
		is_neg = true
	}
	// Fill the string from the end
	for n > u8(0) {
		d := n % u8(10)
		buf[max - len - 1] = d + u8(`0`)
		len++
		n = n / u8(10)
	}
	// Prepend - if it's negative
	if is_neg {
		buf[max - len - 1] = `-`
		len++
	}
	return tos(buf + max - len, len)
}

fn(i64 num) str() string {
	var n = num
	if n == i64(0) {
		return '0'
	}
	max := 32
	var buf = malloc(max)
	var len = 0
	var is_neg = false
	if n < i64(0) {
		n = -n
		is_neg = true
	}
	// Fill the string from the end
	for n > i64(0) {
		d := int(n % i64(10))
		buf[max - len - 1] = d + int(`0`)
		len++
		n = n / i64(10)
	}
	// Prepend - if it's negative
	if is_neg {
		buf[max - len - 1] = `-`
		len++
	}
	return tos(buf + max - len, len)
}

fn(bool b) str() string {
	if b {
		return 'true'
	}
	return 'false'
}

fn(int n) hex() string {
	len := if n >= 0 {
		n.str().len + 3
	} else {
		11
	}
	hex := malloc(len) // 0x + \n 
	count := int(C.sprintf(hex, '0x%x', n))
	return tos(hex, count)
}

fn(i64 n) hex() string {
	len := if n >= i64(0) {
		n.str().len + 3
	} else {
		19
	}
	hex := malloc(len)
	count := int(C.sprintf(hex, '0x%x', n))
	return tos(hex, count)
}
/*
// 16 ×ª 10
fn(string n) digit() string {
	strtol(hex, NULL, 16)
	//d := malloc(32)
	d := n.str()
	for i, p in d {
		
	}
	count := int(C.sprintf(hex, '0x%x', n))
	return tos(d, count)
}
*/
fn([]char a) contains(char val) bool {
	for c in a {
		if c == val {
			return true
		}
	}
	return false
}

fn(rune c) str() string {
	fst_byte := int(c) >> 8 * 3 & 0xff
	len := utf8_char_len(fst_byte)
	var str = string {
		len: len
		str: malloc(len + 1)
	}
	for i = 0; i < len; i++ {
		str.str[i] = int(c) >> 8 * (3 - i) & 0xff
	}
	str[len] = `\0`
	return str
}

// ×Ö·û×ª ×Ö·û´®
fn(char c) str() string {
	var str = string {
		len: 1
		str: malloc(2)
	}
	str.str[0] = c
	str.str[1] = `\0`
	return str
}


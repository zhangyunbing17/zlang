
module os

#include <sys/stat.h>
#include <signal.h>
//#include <unistd.h> // gcc
#include <sys/unistd.h> // tcc
#include <errno.h>
//#include <execinfo.h> // for backtrace_symbols_fd 
$if windows {
	#flag -lws2_32
	#include <winsock2.h>
}

// Windows 
import const (
	FILE_ATTRIBUTE_DIRECTORY
	INVALID_FILE_ATTRIBUTES
) 

import const (
	SEEK_SET
	SEEK_END
	SA_SIGINFO
	S_IFMT
	S_IFDIR
	SIGABRT
	SIGFPE
	SIGILL
	SIGINT
	SIGSEGV
	SIGTERM
)

const (
	args = []string
	MAX_PATH = 4096
)

/* 
class dirent {
    int    	d_ino 
    int   	d_off
	u16 	d_reclen 
	char 	d_type  
	[256]char 	d_name 
} 
*/ 

// 在目录中偏移
class C.dirent {
	char* d_name
}

class FILE { }

class File {
	*FILE cfile
}

class FileInfo {
	string 	name 
	int 	size 
}

// 文件状态
class C.stat {
	int st_size   // 文件是否存在
	int st_mode   // 
	int st_mtime  // 修改时间
}

class C.DIR { }

class C.sigaction {

	int sa_mask 
	int sa_sigaction 
	int sa_flags 
}

// c语言 函数
class C. {
	//int getline(voidptr, voidptr, voidptr) 
	int getline()
	//int ftell(voidptr fp) 
	//byte* getenv(byte*) 
	char* getenv()
	//int sigaction(int, voidptr, int)
	int sigaction()
}

fn todo_remove(){}

//--------------- argv ----------------------------------------------------
[private]
fn init_os_args(int argc, **char argv) []string {
	var args = []string
	for i = 0; i < argc; i++ {
		args << string(argv[i])
	}
	return args
}

[private]
fn parse_windows_cmd_line(char* cmd) []string {
	s := string(cmd)
	return s.split(' ')
}

//--------------- File 方法 ----------------------------------------------------
// 写入文件 到 cfile
fn (File f) write(string s) {
	str := s.clone()
	C.fputs(str.cstr(), _.cfile)
	// str.free()
	// C.fwrite(s.str, 1, s.len, _.cfile)
}

// write(7, 4), "07 00 00 00" 
// write(0x1234, 2) => "34 12"
fn (File f) write_bytes(void* data, int size) {
	C.fwrite(data, 1, size, f.cfile)
}

fn (File f) write_bytes_at(void* data, int size, pos) {
	C.fseek(f.cfile, pos, SEEK_SET)
	C.fwrite(data, 1, size, f.cfile)
	C.fseek(f.cfile, 0, SEEK_END)
}
/*
fn (File f) writeln(string s) {
	// C.fwrite(s.str, 1, s.len, f.cfile)
	// ss := s.clone()
	// TODO perf
	C.fputs(s.cstr(), f.cfile)
	// ss.free()
	C.fputs('\n', f.cfile)
}
*/
void File::writeln(string s) {
	
	C.fputs(s.cstr(), _.cfile)
	C.fputs('\n', _.cfile)
}

fn (File f) flush() {
	C.fflush(f.cfile)
}

fn (File f) close() {
	C.fclose(f.cfile)
}

// 打开文件
fn open(string path) ?File {
	cpath := path.cstr() 
	file := File {
		cfile: C.fopen(cpath, 'rb') 
	}
	if isnil(file.cfile) {
		panic('无法打开文件 "$path"')
	}
	return file 
}

// 创建文件
fn create(string path) ?File {
	cpath := path.cstr() 
	file := File {
		cfile: C.fopen(cpath, 'wb') 
	}
	if isnil(file.cfile) {
		return error('无法创建文件 "$path"')
	}
	return file 
}

fn open_append(string path) ?File {
	cpath := path.cstr() 
	file := File {
		cfile: C.fopen(cpath, 'ab') 
	}
	if isnil(file.cfile) {
		return error('无法创建文件 "$path"')
	}
	return file 
}

// 写
fn write_file(string path, text) {
	f := os.create(path) or {
		return 
	} 
	f.write(text)
	f.close()
}

//--------------- 文件函数 ----------------------------------------------------


// 读取文件
fn read_file(string path) ?string { 
	var res = '' 
	cpath := path.cstr() 
	void* fp = #fopen(cpath, "rb")
	if isnil(fp) {
		return error('os 读取文件失败 "$path"') 
	}
	# fseek(fp, 0, SEEK_END) ;
	
	int fsize = #ftell(fp)  
	# rewind(fp);
	char* str = malloc(fsize + 1)
	# fread(str, fsize, 1, fp);
	# fclose(fp);
	str[fsize] = 0
	
	if str[0] == 0xEF && str[1] == 0xBB && str[2] == 0xBF {
		// 跳过 3 BOM bytes
		offset := 3
		res = tos(str[offset], C.strlen(str) - offset)
	}
	else {
		res = tos(str, fsize)
	}
	return res
}

fn read_file2(string path) string {
	res := ''
	# FILE *f = fopen(path.str, "r");
	# if (!f) return tos("", 0);
	# fseek(f, 0, SEEK_END);
	# long fsize = ftell(f);
	// # fseek(f, 0, SEEK_SET);  //same as rewind(f);
	# rewind(f);
	# char *string = malloc(fsize + 1);
	# fread(string, fsize, 1, f);
	# fclose(f);
	# string[fsize] = 0;
	// # printf("RFILE= %s\n", string);
	# res = tos(string, fsize);
	return res
}

// 读取一行
fn read_lines(string path) []string {
	var res = []string
	var ch = [1000]char
	cpath := path.cstr()
	fp := C.fopen(cpath, 'rb')
	if isnil(fp) {
		return res
	}
	for C.fgets(ch, 1000, fp) != 0 {
		var val = ''
		ch[C.strlen(ch) - 1] = `\0` 
		$if windows {
			if ch[strlen(ch)-2] == 13 {
				ch[strlen(ch) - 2] = `\0`
			}
		}
		res << tos_clone(ch)
	}
	C.fclose(fp)
	return res
}

// 读取无符号 一行
[private]
fn read_ulines(string path) []ustring {
	lines := read_lines(path)
	// var ulines := new_array1(lines.len, 'ustring')
	var ulines = []ustring
	for myline in lines {
		// ulines[i] = ustr
		ulines << myline.ustring()
	}
	return ulines
}

// 文件大小
fn file_size(string path) int {
	s := C.stat{}
	C.stat(path.str, &s)
	return s.st_size
}

// 重命名
fn mv(string old, _new) {
	C.rename(old.cstr(), _new.cstr())
}

//--------------- 文件目录处理 ----------------------------------------------------
// 文件是否存在
fn file_exists(string path) bool {
	$if windows {
		return C._access( path.str, 0 ) != -1
	}
	return C.access( path.str, 0 ) != -1
}

// 目录是否存在
fn dir_exists(string path) bool {
	$if windows {
		attr := int(C.GetFileAttributes(path.cstr()))  
		if attr == -1 { //INVALID_FILE_ATTRIBUTES
			return false
		}
		if (attr & 16) != 0 { //FILE_ATTRIBUTE_DIRECTORY
			return true
		}
		return false
	} 
	$else { 
		dir := C.opendir(path.cstr())
		res := !isnil(dir)
		if res {
			C.closedir(dir)
		}
		return res
	} 
}

// 创建目录 
fn mkdir(string path) {
	$if windows {
		path = path.replace('/', '\\')
		C.CreateDirectory(path.cstr(), 0)
	}
	$else {
		C.mkdir(path.cstr(), 511)// S_IRWXU | S_IRWXG | S_IRWXO
	}
}

// 删除 // rm removes
fn rm(string path) {
	C.remove(path.cstr()) // 目录调用 rmdir ,  文件调用 unlink
	// C.unlink(path.cstr())
}

/*
// 删除 空目录 // directory
fn rmdir(string path) {
	$if windows {	
		C.RemoveDirectoryA(path.cstr())
	}
	$else {
		C.rmdir(path.cstr())
	}
}*/

[private]
fn print_c_errno() {
	//C.printf('errno=%d err="%s"\n', errno, C.strerror(errno)) 
}

//--------------- path处理 ----------------------------------------------------
// 扩展名 .z
fn ext(string path) string {
	pos := path.last_index('.')
	if pos == -1 {
		return ''
	}
	return path.right(pos)
}

// 返回目录  
fn dir(string path) string {
	var pos = -1 
	$if windows { 
		pos = path.last_index('\\') 
	} 
	$else { 
		pos = path.last_index('/')
	} 
	if pos == -1 {
		return '.' 
	} 
	return path.left(pos)//.replace('\\' , '/')
} 

// 返回基本目录/
fn basedir(string path) string {
	pos := path.last_index('/')
	if pos == -1 {
		return path
	}
	return path.left(pos + 1)
}

// 目录文件 无扩展名
[private]
fn path_sans_ext(string path) string {
	pos := path.last_index('.')
	if pos == -1 {
		return path
	}
	return path.left(pos)
}

// 文件名 + 扩展名
fn filename(string path) string {
	return path.all_after('/')
}

//--------------- stdin ----------------------------------------------------
// 从标准输入 stdin 返回一行
fn get_line() string {
    str := get_raw_line()
    if str[str.len - 1] == `\n` {
        return str.substr(0, str.len - 1)
    }

    return str
}

fn get_raw_line() string {
	$if windows {
		max := 256
		buf := malloc(max)
		h_input := C.GetStdHandle(STD_INPUT_HANDLE)
		if h_input == -1 { //INVALID_HANDLE_VALUE
			panic('get_raw_line() 错误: 控制台输入处理')
		}
		nr_chars := 0 
		C.ReadConsole(h_input, buf, max, &nr_chars, 0)
		if nr_chars == 0 {
			return ''
		}
		return tos(buf, nr_chars)
	}
	$else { 
		max := u64(256)
		buf := malloc(int(max))
		int nr_chars = # getline(&buf, &max, stdin)
		if nr_chars == 0 {
			return ''
		}
		return tos(buf, nr_chars)
	} 
}

//用户os
fn user_os() string {
	$if linux {
		return 'linux'
	}
	$if mac {
		return 'mac'
	}
	$if windows {
		return 'windows'
	} 
	return '未知用户os'
}

fn hostname() ?string {
  	var hname = [256]char
	// https://www.ietf.org/rfc/rfc1035.txt 
	res := C.gethostname(&hname, 256)
	if res != 0 {
		return error('返回PC主机名错误')
	}
  	return tos_clone(hname)
}

// "C:\Users\zhang\"
fn home_dir() string {
	var home = os.getenv('HOME')
	$if windows {
		home = os.getenv('HOMEDRIVE')
		if home.len == 0 {
			home = os.getenv('SYSTEMDRIVE')
		}
		var homepath = os.getenv('HOMEPATH')
		if homepath.len == 0 {
			homepath = '\\Users\\' + os.getenv('USERNAME')
		}
		home += homepath
	}
	home += '/'
	return home
}

// 可执行文件
fn executable() string {
	var result = malloc(MAX_PATH) 
	$if windows {
		ret := int(C.GetModuleFileName( 0, result, MAX_PATH ))
		return tos( result, ret)
	}
	$if linux {
		count := int(C.readlink('/proc/self/exe', result, MAX_PATH ))
		if count < 0 {
			panic('读取exe目录错误')
		}
		return tos(result, count)
	}
	$if mac {
		pid := C.getpid() 
		ret := C.proc_pidpath (pid, result, MAX_PATH) 
		if ret <= 0  {
			println('os.executable() failed') 
			return '.'  
		}  
		return string(result) 
	}
	return '.' 
}

fn is_dir(string path) bool {
	$if windows {
		val := int(C.GetFileAttributes(path.cstr())) 
		return val &FILE_ATTRIBUTE_DIRECTORY > 0
	} 
	$else { 
		statbuf := C.stat{}
		cstr := path.cstr()
		if C.stat(cstr, &statbuf) != 0 {
			return false
		}
		return statbuf.st_mode & S_IFMT == S_IFDIR
	} 
}

// 更改目录
fn chdir(string path) {
	$if windows {
		C._chdir(path.cstr())
	}
	$else { 
		C.chdir(path.cstr())
	} 
}

// 当前工作目录
//F:\z\z
fn getwd() string {
	mulu := malloc(512)
	$if windows {
		if C._getcwd(mulu, 512) == 0 {
			return ''
		}
	}
	$else { 
		if C.getcwd(mulu, 512) == 0 {
			return ''
		}
	} 
	return string(mulu)//.replace('\\' , '/')
}

// win: FILETIME
// https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime
class filetime {
  u32 dwLowDateTime 
  u32 dwHighDateTime 
}

// win: WIN32_FIND_DATA
// https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-_win32_find_dataa
class win32finddata {
    u32 dwFileAttributes 
    filetime ftCreationTime 
  	filetime ftLastAccessTime 
  	filetime ftLastWriteTime 
	u32 nFileSizeHigh 
	u32 nFileSizeLow 
	u32 dwReserved0 
	u32 dwReserved1
	[260]u16 cFileName  // MAX_PATH = 260 
	[14]u16 cAlternateFileName  // 14
  	u32 dwFileType 
  	u32 dwCreatorType 
  	u16 wFinderFlags  
}

fn ls(string path) []string {
	$if windows {
		var find_file_data = win32finddata{}
		var dir_files = []string 
		// h_find_dir := C.FindFirstFile(path.cstr(), &find_file_data)
		// if (INVALID_HANDLE_VALUE == h_find_dir) {
		//     return dir_files
		// }
		// C.FindClose(h_find_dir)
		if !dir_exists(path) {
			println('ls() 不存在 "$path"')
			return dir_files
		}
		
		path_files := '$path\\*' 
		h_find_files := C.FindFirstFile(path_files.cstr(), &find_file_data)
		first_filename := tos(&find_file_data.cFileName, strlen(find_file_data.cFileName))
		if first_filename != '.' && first_filename != '..' {
			dir_files << first_filename
		}
		for C.FindNextFile(h_find_files, &find_file_data) {
			filename := tos(&find_file_data.cFileName, strlen(find_file_data.cFileName))
			if filename != '.' && filename != '..' {
				dir_files << filename.clone()
			}
		}
		C.FindClose(h_find_files)
		return dir_files
	} 
	$else { 
		var res = []string
		dir := C.opendir(path.cstr()) 
		if isnil(dir) {
			println('ls() 不存在 "$path"')
			print_c_errno()
			return res
		}
		// 目录偏移
		var nt = &C.dirent{!}
		for {
			// 从目录中读取 条目
			nt = C.readdir(dir)
			if isnil(nt) {
				break
			}
			name := tos_clone(nt.d_name)
			if name != '.' && name != '..' && name != '' {
				res << name
			}
		}
		C.closedir(dir)
		return res
	} 
}

//--------------- 执行 ----------------------------------------------------
fn system(string cmd) int {
	ret := C.system(cmd.cstr()) 
	if ret == -1 {
		os.print_c_errno()
	}
	return ret
}

[private]
fn popen(string path) *FILE {
	cpath := path.cstr()
	$if windows {
		return C._popen(cpath, 'r')
	}
	$else {
		return C.popen(cpath, 'r')
	}
}

fn exec(string cmd) string {
	cmd = '$cmd 2>&1'
	f := popen(cmd) 
	if isnil(f) {
		println('popen $cmd 失败')
		return '' 
	}
	buf := [1000]char 
	var res = ''
	for C.fgets(buf, 1000, f) != 0 { 
		res += tos(buf, strlen(buf)) 
	}
	return res.trim_space()
}

fn clear() {
	C.printf('\x1b[2J')
	C.printf('\x1b[H')
}


//--------------- 环境 ----------------------------------------------------
// 返回环境变量
fn getenv(string key) string {
	s := C.getenv(key.cstr())
	if isnil(s) {
		return ''
	}
	return string(s)
}

// 设置环境变量
fn setenv(string name, value, bool overwrite) int {
	$if windows {
		format := '$name=$value'

		if overwrite {
			return C._putenv(format.cstr())
		}

		return -1
	} 
	$else { 
		return C.setenv(name.cstr(), value.cstr(), overwrite)
	} 
}

// 删除环境变量
fn unsetenv(string name) int {
	$if windows {
		format := '${name}='
		
		return C._putenv(format.cstr())
	} 
	$else { 
		return C.unsetenv(name.cstr())
	} 
}

//--------------- 其它 ---------------------------------------------------- 
fn signal(int signum, void* handler) {
	C.signal(signum, handler)
}

fn fork() int {
	$if !windows {
		pid := C.fork()
		return pid
	}
}

fn wait() int {
	$if !windows {
		pid := C.wait(0)
		return pid
	}
}

fn file_last_mod_unix(string path) int {
	attr := C.stat{} 
	//# struct stat attr;
	C.stat(path.str, &attr) 
	//# stat(path.str, &attr);
	return attr.st_mtime 
	//# return attr.st_mtime ;
}
 
fn print_backtrace() {
/* 
	# void *buffer[100];
	nptrs := 0
	# nptrs = backtrace(buffer, 100);
	# printf("%d!!\n", nptrs);
	# backtrace_symbols_fd(buffer, nptrs, STDOUT_FILENO) ;
*/ 
}

/*
[private]
void on_segfault(void* f) {
	$if windows {
		return
	}
	$if mac {
		var sa = C.sigaction{}
		C.memset(&sa, 0, sizeof(sigaction))
		C.sigemptyset(&sa.sa_mask)
		sa.sa_sigaction = f
		sa.sa_flags   = SA_SIGINFO
		C.sigaction(SIGSEGV, &sa, 0)
	}
}*/



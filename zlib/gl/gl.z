

module gl

import const (
	GL_TEXTURE_2D
	GL_TEXTURE0
	GL_FLOAT
	GL_VERTEX_SHADER
	GL_ELEMENT_ARRAY_BUFFER
	GL_DEPTH_TEST
	GL_COLOR_BUFFER_BIT
	GL_DEPTH_BUFFER_BIT
	GL_STENCIL_BUFFER_BIT
	GL_COMPILE_STATUS
	GL_LINK_STATUS
	GL_ARRAY_BUFFER
)

#flag  -I @VROOT/thirdparty/glad

#include "glad.h"
#flag @VROOT/thirdparty/glad/glad.o 
//#include "glad.c"  

fn init_glad() {
	ok := C.gladLoadGL()
	if !ok {
		println('Failed to initialize glad OpenGL context')
		exit(1)
	}
}

fn viewport(int a, b, c, d ) {
	C.glViewport(a, b, c, d)
}

fn clear_color(int r, g, b, a ) {
	C.glClearColor(f32(r)/255.0, f32(g)/255.0, f32(b)/255.0, f32(a)/255.0)
}

fn clear() {
	C.glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT)
}

fn create_shader(int typ ) int {
	return C.glCreateShader(typ)
}

fn create_program() int {
	return C.glCreateProgram()
}

fn shader_source(int shader, a , string source , int b ) {
	C.glShaderSource(shader, a, &source.str, b)
}

fn compile_shader(int shader ) {
	C.glCompileShader(shader)
}

fn shader_compile_status(int shader ) int {
	success := 0
	C.glGetShaderiv(shader, GL_COMPILE_STATUS, &success)
	return success
}

fn attach_shader(int program, shader ) {
	// fn (s Shader) attach(program int) {
	C.glAttachShader(program, shader)
}

fn link_program(int program ) {
	C.glLinkProgram(program)
}

fn get_program_link_status(int program ) int {
	success := 0
	C.glGetProgramiv(program, GL_LINK_STATUS, &success)
	return success
}

fn delete_shader(int shader ) {
	C.glDeleteShader(shader)
}

fn shader_info_log(int shader ) string {
	info_log := [512]char
	C.glGetShaderInfoLog(shader, 512, 0, info_log)
	return tos_clone(info_log)
}

fn get_program_info_log(int program ) string {
	info_log := [1024]char
	C.glGetProgramInfoLog(program, 1024, 0, info_log)
	return tos_clone(info_log)
}

fn bind_vao(u32 vao ) {
	C.glBindVertexArray(vao)
}

fn bind_buffer(int typ , u32 vbo ) {
	C.glBindBuffer(typ, vbo)
}

fn gen_texture() u32 {
	res := u32(0)
	C.glGenTextures(1, &res)
	return res
}

fn active_texture(int t ) {
	C.glActiveTexture(t)
}

fn bind_2d_texture(u32 texture ) {
	C.glBindTexture(GL_TEXTURE_2D, texture)
}

fn delete_texture(u32 texture ) {
	C.glDeleteTextures(1, &texture)
}

fn buffer_data(int typ, size , void* arr , int draw_typ ) {
	C.glBufferData(typ, size, arr, draw_typ)
}

fn buffer_data_int(int typ , []int vertices , int draw_typ ) {
	size := sizeof(int) * vertices.len
	C.glBufferData(typ, size, vertices.data, draw_typ)
}

fn buffer_data_f32(int typ , []f32 vertices , int draw_typ ) {
	size := sizeof(f32) * vertices.len
	C.glBufferData(typ, size, vertices.data, draw_typ)
}

fn set_vbo( u32 vbo, []f32 vertices , int draw_typ ) {
	gl.bind_buffer(GL_ARRAY_BUFFER, vbo)
	gl.buffer_data_f32(GL_ARRAY_BUFFER, vertices, draw_typ)
}

fn set_ebo(u32 ebo , []int indices , int draw_typ ) {
	gl.bind_buffer(GL_ELEMENT_ARRAY_BUFFER, ebo)
	// gl.buffer_data_int(GL_ELEMENT_ARRAY_BUFFER, indices, draw_typ)
	gl.buffer_data_int(GL_ELEMENT_ARRAY_BUFFER, indices, draw_typ)
}

// /////////////////////
// fn gen_vertex_arrays(a int, vao uint) {
// # glGenVertexArrays(a, &VAO);
// }
fn draw_arrays(int typ, start, len ) {
	C.glDrawArrays(typ, start, len)
}

fn draw_elements(int mode, count, typ, indices ) {
	C.glDrawElements(mode, count, typ, indices)
}

fn use_program(int program ) {
	C.glUseProgram(program)
}

fn gen_vertex_array() u32 {
	vao := u32(0)
	C.glGenVertexArrays(1, &vao)
	return vao 
}

fn enable_vertex_attrib_array(int n) {
	C.glEnableVertexAttribArray(n)
}

fn gen_buffer() u32 {
	vbo := u32(0)
	C.glGenBuffers(1, &vbo)
	return vbo 
}

fn vertex_attrib_pointer(int index, size , typ , bool normalized , int stride , ptr) {
	if typ == GL_FLOAT {
		stride *= sizeof(f32)
		ptr *= sizeof(f32)
	}
	C.glVertexAttribPointer(index, size, typ, normalized, stride, ptr)
}

fn tex_param(int key, val ) {
	C.glTexParameteri(GL_TEXTURE_2D, key, val)
}

fn enable(int val) {
	C.glEnable(val)
}

fn disable(int val) {
	C.glDisable(val)
}

fn scissor(int a, b, c, d ) {
	C.glScissor(a, b, c, d)
}

fn generate_mipmap(int typ ) {
	C.glGenerateMipmap(typ)
}

